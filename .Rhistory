matrix
}
MatrixPower(p, 3)
MatrixPower <- function(matrix, power)
{
matrix_out <- matrix
for(i in 1:power-1)
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
MatrixPower(p, 3)
MatrixPower(p, 2)
MatrixPower(p, 1)
p%*%p
MatrixPower <- function(matrix, power)
{
matrix_out <- matrix
for(i in 1:(power-1))
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
MatrixPower(p, 1)
MatrixPower(p, 2)
MatrixPower(p, 3)
p%*%p%*%p
print("Power should be greater than 0")
MatrixPower <- function(matrix, power)
{
if(power > 1)
{
matrix_out <- matrix
for(i in 1:(power-1))
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
else if(power < 0)
{
print("Power should be greater than 0")
}
else
{
matrix_out
}
}
MatrixPower(p, 1)
MatrixPower <- function(matrix, power)
{
matrix_out <- matrix
if(power > 1)
{
for(i in 1:(power-1))
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
else if(power < 0)
{
print("Power should be greater than 0")
}
else
{
matrix_out
}
}
MatrixPower(p, 1)
MatrixPower(p, 2)
MatrixPower(p, 3)
MatrixPower(p, 100)
MatrixPower(p, 200)
MatrixPower(p, 20)
MatrixPower(p, 7)
MatrixPower(p, 0)
MatrixPower <- function(matrix, power)
{
matrix_out <- matrix
if(power > 1)
{
for(i in 1:(power-1))
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
else if(power <= 0)
{
print("Power should be greater than 0")
}
else
{
matrix_out
}
}
MatrixPower(p, 0)
diag(4)
t(p)
length(p)
sqrt(length(p))
nrow(p)
MatrixPower <- function(matrix, power)
{
if(nrow(matrix)=ncol(matrix))
{
matrix_out <- matrix
if(power > 1)
{
for(i in 1:(power-1))
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
else if(power <= 0)
{
print("Power should be greater than 0")
}
else
{
matrix_out
}
}
else
{
print("Only n by n matrices can be multiplied with itself")
}
}
ncol(p)
MatrixPower <- function(matrix, power)
{
if(nrow(matrix)==ncol(matrix))
{
matrix_out <- matrix
if(power > 1)
{
for(i in 1:(power-1))
{
matrix_out <- matrix%*%matrix_out
}
matrix_out
}
else if(power <= 0)
{
print("Power should be greater than 0")
}
else
{
matrix_out
}
}
else
{
print("Only n by n matrices can be multiplied with itself")
}
}
1.0, 0.0, 0.0,), nrow=3, byrow=TRUE)
p <- matrix(c(0.5, 0.3, 0.2,
0.1, 0.9, 0.0,
1.0, 0.0, 0.0,
0.0, 0.8, 0.2), nrow=3, byrow=TRUE)
MatrixPower(p, 0)
MatrixPower(p, 2)
p <- matrix(c(0.5, 0.3, 0.2,
0.1, 0.9, 0.0,
1.0, 0.0, 0.0), nrow=3, byrow=TRUE)
MatrixPower(p, 2)
diag(nrow(p))
t(p) - diag(nrow(p))
rep(1,2)
c(rep(1,2))
z <- c(rep(1,nrow(p)))
A <- rbind(p,z)
A
A <- rbind(t(p)-diag(nrow(p)),z)
a
A
A
t(p) - diag(nrow(p))
p
A
A <- rbind(t(p)-diag(nrow(p)),c(rep(1,nrow(p))))
A
c(rep(0,nrow(p)))
matrix(c(rep(0,nrow(p))),nrow=3)
matrix(c(rep(0,nrow(p))),nrow=nrow(p))
cbind(matrix(c(rep(0,nrow(p))),nrow=nrow(p)),1)
rbind(matrix(c(rep(0,nrow(p))),nrow=nrow(p)),1)
b <- rbind(matrix(c(rep(0,nrow(p))),nrow=nrow(p)),1)
solve(A,b)
qr.solve(A,b)
p <- matrix(c(0.5, 0.3, 0.2,
0.1, 0.9, 0.0,
1.0, 0.0, 0.0), nrow=3, byrow=TRUE)
MatrixPower(p, 2)
LongRunProp(p)
LongRunProp <- function(p)
{
if(nrow(p)==ncol(p))
{
A <- rbind(t(p)-diag(nrow(p)),c(rep(1,nrow(p))))
b <- rbind(matrix(c(rep(0,nrow(p))),nrow=nrow(p)),1)
qr.solve(A,b)
}
else
{
print("Transition Matrix should be a n by n matrix")
}
}
LongRunProp <- function(p)
{
if(nrow(p)==ncol(p))
{
A <- rbind(t(p)-diag(nrow(p)),c(rep(1,nrow(p))))
b <- rbind(matrix(c(rep(0,nrow(p))),nrow=nrow(p)),1)
qr.solve(A,b)
}
else
{
print("Transition Matrix should be a n by n matrix")
}
}
p <- matrix(c(0.5, 0.3, 0.2,
0.1, 0.9, 0.0,
1.0, 0.0, 0.0), nrow=3, byrow=TRUE)
LongRunProp(p)
library(jsonlite)
u     <- "http://api.nobelprize.org/v1/laureate.json"
nobel <- fromJSON(u)
nobel
head(nobel)
n <- 100
p <- 0.5
dbinom(6, n, p)
# Exact
n <- 100
p <- 0.05
dbinom(6, n, p)
pbinom(5, n, p)
pbinom(6, n, p) - pbinom(2, n, p)
mean = n*p
sigma = n*p*(1-p)
mu = n*p
sigma = n*p*(1-p)
pnorm(6.5,mu,sigma)
pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma)
dbinom(6, n, p)
pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma)
pnorm(6.5,mu,sigma)
pbinom(5, n, p)
pnorm(6.5,mu,sigma,lower.tail = TRUE, log.p = FALSE)-pnorm(5.5,mu,sigma,lower.tail = TRUE, log.p = FALSE)
dnorm(6.5,mu,sigma)
dbinom(6, n, p)
mu = n*p
sigma = sqrt(n*p*(1-p))
#Exactly 6 successes
pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma)
pnorm(5.5,mu,sigma)
pnorm(6.5,mu,sigma)-pnorm(2.5,mu,sigma)
pbinom(6, n, p) - pbinom(2, n, p)
rbind(dbinom(6, n, p),pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma))
cbind(dbinom(6, n, p),pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma))
c1 <- cbind(dbinom(6, n, p), pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma))
c2 <- cbind(pbinom(5, n, p), pnorm(5.5,mu,sigma))
c3 <- cbind(pbinom(6, n, p) - pbinom(2, n, p), pnorm(6.5,mu,sigma)-pnorm(2.5,mu,sigma))
c <- rbind(c1,c2,c3)
r
c
colnames(c)
colnames(c) <- c('From Binomial', 'Normal Approximation')
c
table <- rbind(cbind(b1,n1),cbind(b2,n2),cbind(b3,n3))
#Exactly 6 successes
b1 <- dbinom(6, n, p)
#Fewer than 6 successes
b2 <- pbinom(5, n, p)
#Between 3 and 6 successes (including 3 and 6)
b3 <- pbinom(6, n, p) - pbinom(2, n, p)
# Normal Approximation
mu = n*p
sigma = sqrt(n*p*(1-p))
#Exactly 6 successes
n1 <- pnorm(6.5,mu,sigma)-pnorm(5.5,mu,sigma)
#Fewer than 6 successes
n2 <- pnorm(5.5,mu,sigma)
#Between 3 and 6 successes (including 3 and 6)
n3 <- pnorm(6.5,mu,sigma)-pnorm(2.5,mu,sigma)
table <- rbind(cbind(b1,n1),cbind(b2,n2),cbind(b3,n3))
table
colnames(c) <- c('Binomial', 'Normal Approx')
rownames(table) <- c('Exactly 6', 'Fewer than 6', 'Between 3 and 6')
colnames(table) <- c('Binomial', 'Normal Approx')
table
mu = n*p
dpois(6, mu) #Exactly 6
p2 <- ppois(5, mu) #Fewer than 6
p3 <- ppois(6, mu) - ppois(2,mu) #Between 3 and 6 successes (including 3 and 6)
table <- rbind(cbind(b1,n1,p1),cbind(b2,n2,p2),cbind(b3,n3,p3))
colnames(table) <- c('Binomial', 'Normal Approx', 'Poisson')
rownames(table) <- c('Exactly 6', 'Fewer than 6', 'Between 3 and 6')
table
p1 <- dpois(6, mu) #Exactly 6
p2 <- ppois(5, mu) #Fewer than 6
p3 <- ppois(6, mu) - ppois(2,mu) #Between 3 and 6 successes (including 3 and 6)
table <- rbind(cbind(b1,n1,p1),cbind(b2,n2,p2),cbind(b3,n3,p3))
colnames(table) <- c('Binomial', 'Normal Approx', 'Poisson')
rownames(table) <- c('Exactly 6', 'Fewer than 6', 'Between 3 and 6')
table
plastic <- c(8.1, 7.8, 8.5, 9.8, 9.5, 8.9, 8.6, 10.2, 9.3, 9.2, 10.5)
plastic <- c(8.1, 7.8, 8.5, 9.8, 9.5, 8.9, 8.6, 10.2, 9.3, 9.2, 10.5)
sex <- c('m', 'm', 'f', 'f', 'm', 'f', 'm', 'f', 'm', 'f', 'f', 'f',
'm', 'm', 'f', 'm', 'm', 'f', 'm', 'f', 'm', 'f', 'm', 'f',
'm', 'f', 'm', 'f', 'm', 'f')
prefer <- c('like', 'like', 'nolike', 'nolike', 'like', 'nolike', 'like',
'like', 'like', 'like', 'nolike', 'nolike', 'like', 'nolike',
'like', 'like', 'nolike', 'like', 'like', 'nolike', 'like', 'like',
'like', 'like', 'nolike', 'nolike', 'like', 'like', 'like', 'like')
sales<- cbind(seq(1:30), sex, prefer)
sales
sales <- data.frame(sales)
sales <- rename(sales, c(V1="respond"))
names(sales) <- c('respond','sex','prefer')
sales$respond <- as.numeric(sales$respond)
sales
sales<- cbind(sex, prefer)
sales <- data.frame(sales)
sales$respond <- seq(1:30)
attach(sales)
table(sales)
sales[,-3]
sales[,-respond]
attach(sales[,-3])
mytable <- table(sales[,-3])
mytable
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
library(jsonlite)
u     <- "http://api.nobelprize.org/v1/laureate.json"
nobel <- fromJSON(u)
head(nobel$laureates)
getwd()
write.csv(nobel$laureates, "laureates.csv")
nobel$prizes
nobel$laureates$prizes
head(nobel$laureates)
sms_raw <- read.csv("Datasets/sms_spam.csv", stringsAsFactors = FALSE)
setwd("d:/data analysis/machine learning with R")
sms_raw <- read.csv("Datasets/sms_spam.csv", stringsAsFactors = FALSE)
head(sms_raw)
sms_raw$type <- factor(sms_raw$type)
table(sms_raw$type)
library(tm) #For dealing with text data
install.packages("tm")
library(tm) #For dealing with text data
sms_corpus <- Corpus(VectorSource(sms_raw$text))
inspect(sms_corpus[1:3])
head(sms_corpus)
sms_corpus[[1]]
sms_corpus$content[[1]]
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
inspect(corpus_clean[1:3])
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
sms_dtm <- DocumentTermMatrix(corpus_clean)
inherits(corpus_clean, "TextDocument")
corpus_clean
sms_raw <- read.csv("Datasets/sms_spam.csv", stringsAsFactors = FALSE)
sms_raw$type <- factor(sms_raw$type)
table(sms_raw$type)
sms_corpus <- Corpus(VectorSource(sms_raw$text))
inherits(sms_corpus, "TextDocument")
sms_corpus <- Corpus(VectorSource(sms_raw$text))
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
sms_dtm <- TermDocumentMatrix(corpus_clean) #Creating a document term matrix
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)
inherits(corpus_clean, "TextDocument")
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
set.seed(22)
library(caTools) #For sampling
set.seed(22)
spl <- sample.split(sms_raw$type, SplitRatio=0.7)
sms_raw_train <- subset(sms_raw, spl==TRUE)
sms_raw_test <- subset(sms_raw, spl==FALSE)
sms_dtm_train <- subset(sms_dtm, spl==TRUE)
sms_corpus_train <- subset(sms_corpus, spl==TRUE)
sms_corpus_test <- subset(sms_corpus, spl==FALSE)
class(sms_dtm)
sms_dtm = as.data.frame(t(as.matrix(sms_dtm)))
sms_dtm_train <- subset(sms_dtm, spl==TRUE)
sms_dtm_test <- subset(sms_dtm, spl==FALSE)
class(sms_dtm)
prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type))
library(wordcloud) #For wordclouds
install.packages("wordcloud")
library(wordcloud) #For wordclouds
wordcloud(sms_corpus_train, min.freq = 40, random.order = FALSE)
spam <- subset(sms_raw_train, type == "spam")
ham <- subset(sms_raw_train, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
findFreqTerms(sms_dtm_train, 5)
sms_dtm = as.data.frame(t(as.matrix(sms_dtm)))
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
findFreqTerms(sms_dtm, 5)
sms_dtm_train <- subset(sms_dtm, spl==TRUE)
sms_dtm
sms_dtm = as.data.frame(t(as.matrix(sms_dtm)))
sms_raw <- read.csv("Datasets/sms_spam.csv", stringsAsFactors = FALSE)
sms_raw$type <- factor(sms_raw$type)
table(sms_raw$type)
sms_corpus <- Corpus(VectorSource(sms_raw$text))
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
sms_dict <- Dictionary(findFreqTerms(sms_dtm, 5))
sms_dtm = as.data.frame(t(as.matrix(sms_dtm)))
sms_dict <- Dictionary(findFreqTerms(sms_dtm, 5))
sms_dtm = as.data.frame(t(as.matrix(sms_dtm)))
set.seed(22)
spl <- sample.split(sms_raw$type, SplitRatio=0.7)
sms_raw_train <- subset(sms_raw, spl==TRUE)
sms_raw_test <- subset(sms_raw, spl==FALSE)
sms_dtm_train <- subset(sms_dtm, spl==TRUE)
sms_dtm_test <- subset(sms_dtm, spl==FALSE)
findFreqTerms(sms_dtm, lowfreq=20)
findFreqTerms(sms_dtm, lowfreq=5)
findFreqTerms(sms_dtm, lowfreq=100)
sms_dtm_trunc <- removeSparseTerms(sms_dtm, 0.995)
sms_dtm <- as.data.frame(as.matrix(sms_dtm))
install.packages("Matrix")
library(Matrix) #For converting dtm to matrix
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
dim(sms_dtm)
sms_dtm <- removeSparseTerms(sms_dtm, 0.995)
dim(sms_dtm)
sms_dtm <- as.data.frame(as.matrix(sms_dtm))
sms_dict <- Dictionary(findFreqTerms(sms_dtm, 5))
sms_dict <- Terms(findFreqTerms(sms_dtm_train, 5))
sms_dict <- Terms(findFreqTerms(sms_dtm, 5))
sms_dtm <- DocumentTermMatrix(corpus_clean) #Creating a document term matrix
sms_dtm <- removeSparseTerms(sms_dtm, 0.999)
dim(sms_dtm)
sms_dict <- Terms(findFreqTerms(sms_dtm, 5))
findFreqTerms(sms_dtm, 5)
sms_dtm <- as.data.frame(as.matrix(sms_dtm))
set.seed(22)
spl <- sample.split(sms_raw$type, SplitRatio=0.7)
sms_raw_train <- subset(sms_raw, spl==TRUE)
sms_raw_test <- subset(sms_raw, spl==FALSE)
sms_dtm_train <- subset(sms_dtm, spl==TRUE)
sms_dtm_test <- subset(sms_dtm, spl==FALSE)
sms_corpus_train <- subset(sms_corpus, spl==TRUE)
sms_corpus_test <- subset(sms_corpus, spl==FALSE)
convert_counts <- function(x)
{
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(x)
}
convert_counts <- function(x)
{
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
sms_classifier <- naiveBayes(sms_dtm_train, sms_raw_train$type)
library(e1071) #For the Naive Bayes classifier
sms_classifier <- naiveBayes(sms_dtm_train, sms_raw_train$type)
sms_predictions <- predict(sms_classifier, sms_dtm_test)
library(gmodels) #For cross-tabs and result comparison
dnn = c('predicted', 'actual'))
CrossTable(sms_predictions, sms_raw_test$type,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('predicted', 'actual'))
sms_predictions
CrossTable(sms_predictions, sms_raw_test$type)
head(sms_dtm_train)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
return(x)
}
sms_train <- apply(sms_dtm_train, MARGIN = 2, convert_counts)
sms_classifier <- naiveBayes(sms_train, sms_raw_train$type)
sms_test <- apply(sms_dtm_test, MARGIN = 2, convert_counts)
sms_predictions <- predict(sms_classifier, sms_test)
CrossTable(sms_predictions, sms_raw_test$type)
CrossTable(sms_predictions, sms_raw_test$type,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('predicted', 'actual'))
sms_classifier2 <- naiveBayes(sms_train, sms_raw_train$type, laplace = 1)
sms_predictions2 <- predict(sms_classifier2, sms_test)
CrossTable(sms_predictions2, sms_raw_test$type,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('predicted', 'actual'))
